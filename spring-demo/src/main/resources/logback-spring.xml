<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">

    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <springProperty scope="context" name="logging.path" source="logback.log.path"/>
    <springProperty scope="context" name="logstashHost" source="logging.logstash.host"/>
    <springProperty scope="context" name="appName" source="spring.application.name"/>
    <springProperty scope="context" name="profile" source="spring.profiles.active"/>
    <springProperty scope="context" name="domain" source="spring.cloud.zookeeper.discovery.root"/>
    <conversionRule conversionWord="host" converterClass="com.spring.demo.config.log.HostLogConfig"/>
    <conversionRule conversionWord="clientHost" converterClass="com.spring.demo.config.log.ClientIpLogConfig"/>
    <conversionRule conversionWord="tid" converterClass="com.spring.demo.config.log.TraceLogConfig"/>
    <property name="CONSOLE_LOG_PATTERN" value="%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr(%applicationName[%15.15t]){faint} %clr([%tid]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="FILE_LOG_PATTERN" value="| %clientHost %host %d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- %applicationName[%15.15t]  [TID:%tid] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>

    <!-- 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>trace</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <param name="Encoding" value="UTF-8"/>
        <!-- logstash 地址 -->
        <destination>${logstashHost}</destination>
        <includeCallerData>true</includeCallerData>
        <keepAliveDuration>5 minutes</keepAliveDuration>
        <reconnectionDelay>5 second</reconnectionDelay>
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder">
            <!-- 必须为 true 才会追加字段-->
            <includeContext>true</includeContext>
            <includeCallerData>true</includeCallerData>
            <timeZone>UTC</timeZone>
            <!--这个有错误-->
            <timestampPattern>[UNIX_TIMESTAMP_AS_STRING]</timestampPattern>
            <!-- logstash 自动追加字段 -->
            <customFields>
                {"appName":"${appName}","profile":"${profile}"}
            </customFields>
        </encoder>
        <!-- 自定义字段 -->
        <contextMap>
            <entry key="environment" value="production"/>
            <entry key="application" value="${applicationName}"/>
        </contextMap>
    </appender>

    <!-- 2.2 level为 INFO 日志，时间滚动输出  -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${logging.path}/info.log</file>
        <!-- 此日志文档只记录info级别的 -->
        <!-- onMatch,onMismatch取值及含义 -->
        <!-- DENY:日志将立即被抛弃不再经过其他过滤器,最后一个filter的onMismatch使用 -->
        <!-- NEUTRAL:有序列表里的下个过滤器过接着处理日志,非最后一个filter的onMismatch使用 -->
        <!-- ACCEPT:日志会被立即处理，不再经过剩余过滤器,所有filter的onMatch使用 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${logging.path}/archives/info-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!--日志文档保留天数-->
            <maxHistory>7</maxHistory>
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 2.3 level为 DEBUG 日志，时间滚动输出  -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${logging.path}/debug.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${logging.path}/archives/debug-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!--日志文档保留天数-->
            <maxHistory>7</maxHistory>
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 2.4 level为 ERROR 日志，时间滚动输出  -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${logging.path}/error.log</file>
        <!-- 此日志文档只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${logging.path}/archives/error-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!--日志文档保留天数-->
            <maxHistory>7</maxHistory>
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 2.4 level为 TRACE 日志，时间滚动输出  -->
    <appender name="MONITOR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${logging.path}/app.monitor</file>
        <!-- 此日志文档只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${logging.path}/archives/monitor-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!--日志文档保留天数-->
            <maxHistory>7</maxHistory>
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="LOGSTASH"/>
        <appender-ref ref="INFO_FILE"/>
        <appender-ref ref="DEBUG_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
        <appender-ref ref="MONITOR_FILE"/>
    </root>

    <!--    <springProfile name="local">-->
    <!--        <root level="info">-->
    <!--            <appender-ref ref="CONSOLE"/>-->
    <!--            <appender-ref ref="LS"/>-->
    <!--        </root>-->
    <!--    </springProfile>-->

    <!--    <springProfile name="node62">-->
    <!--        <root level="info">-->
    <!--            <appender-ref ref="CONSOLE"/>-->
    <!--            <appender-ref ref="LS"/>-->
    <!--        </root>-->
    <!--    </springProfile>-->

    <!--    <springProfile name="node63">-->
    <!--        <root level="info">-->
    <!--            <appender-ref ref="CONSOLE"/>-->
    <!--            <appender-ref ref="LS"/>-->
    <!--        </root>-->
    <!--    </springProfile>-->

</configuration>
